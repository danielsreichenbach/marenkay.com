{
    "date"      :   201402102345,
    "updated"   :   201402102345,
    "licence"   :   "cc-by",
    "title"     :   "Use phpspec NOW",
    "tags"      :   ["phpspec", "symfony2"]
}

<section>

# Drive your code by specification  #

<Symfony 2 (//symfony.com)> based applications usually should be built driven
by tests. But given the nature of such applications I found myself wondering,
if unit testing with <phpunit (//phpunit.de)> really is the right way to go.
Why? Because a Symfony application usually should implement a specified set
of features, and we should not be looking at our application from a functional
level.

Thus after browsing through <Building Quality into a Symfony app (//speakerdeck.com/jakzal/using-phpspec-to-build-quality-into-a-symfony-app)>
I decided to take the jump, and specify my implementation rather than to
just cover functionality. This is done easily.

## The switch ##

Now let us switch the default Symfony project to phpspec. First I recommend
to install <Composer (//getcomposer.org/)>.

Using Composer we create a project template:

<aside>
    Note that I prefer to use the LTS version of Symfony here.
</aside>

~~~ Bash ~~~>
$ php composer.phar create-project symfony/framework-standard-edition path/ 2.3.9
<~~~

Next we will add phpspec and friends:

~~~ Bash ~~~>
$ php composer.phar require --dev "phpspec/phpspec:2.0.*@dev" "phpspec/prophecy:1.0.*@dev" "henrikbjorn/phpspec-code-coverage:1.0.*@dev"
<~~~

This will add <phpspec (//phpspec.net)> along with the mocking framework prophecy,
and the extension for generating coverage reports -- which you may want to see, right?

## Final call ##

You can -- and should -- add a custom configuration for *phpspec* to your project,
since it allows you to tune output, enable extensions, and also allows to call
spec suites for specific bundles.

The following `phpspec.yml` configuration file is built for the default AcmeDemo
bundle, and enables the code coverage extension with a default configuration.

~~~ YAML ~~~>
extensions:
    - PhpSpec\Extension\CodeCoverageExtension

code_coverage:
  format: html
  output: .qa/coverage

formatter.name: pretty

suites:
  AcmeDemoBundle:
    namespace: Acme\DemoBundle
    spec_path: src/Acme/DemoBundle
<~~~

Now you can start creating specs in `src/Acme/DemoBundle/spec/` for each par of
the bundle, and once done, you can run the test suite:

~~~ Bash ~~~>
$ php bin/phpspec run
<~~~

Check out the <phpspec manual (//phpspec.net/docs/introduction.html)>, and make
friends with it. It might take a while, but you will sooner or later notice that
you switch from mass producing code to only producing what is really needed.

Expect to see more about phpspec soon. One hint ahead of time: do not try to
spec abstract classes, spec the implementations only!

</section>
