{
	"draft"     :   201306081617,
	"updated"   :   201306101653,
	"licence"   :   "cc-by",
	"tags"      :   ["arm"],
	"draft"     :   true
}

<section>

# Debian 7 on Pandaboard ES #

&__TOC__;

I must have been living silently enjoying the fruits of the <ARM architecture (//en.wikipedia.org/wiki/ARM_architecture)>
without considering what possible use cases for a nerd it might have.

<"ARM powered" /&__HREF__;/arm-powered-200.png "Have your seen the ARM powered badge?">

<aside>
	Nerdy benefits, nothing questionable.
</aside>

Much like anybody else I have been using an Android powered smartphone, and --
of course -- it is powered by an ARM powered board.  I would not have considered
the architecture for anything else, if my good friend Christian hadn't started
talking about those "mini computers", and their possible benefits.

## Pandaboard anyone ?! ## (#choices-choices-choices)

I started to look for boards which could probably serve as more than just a
technical playground. Yeah <Raspberry Pi (//raspberrypi.org)> is cool, and it
certainly is a great tool, to learn stuff, but I do not see that turning into
a low power, tiny server appliance.

But: Wikipedia to the rescue, they have a list of <single board computers (//en.wikipedia.org/wiki/List_of_single-board_computers)>
available for the curious minds out there.

After a few hours of reading, searching, and lingering in the Linux kernel
sources I found a candidate for my tiny server appliance:

fig.	<"" /&__HREF__;/pandaboard-es-top-view.png "Pandaboard ES rev. B1">

	: The <Pandaboard ES (//pandaboard.org)>, revision B1

In the end I chose the <Pandaboard (//pandaboard.org)>, and not just for its'
good looks.  Reasons included

<aside>
	<Android Open Source project (//source.android.com/)>? Wait, what?!
	Simply plain Android without any vendor extensions.
</aside>

•	it is *not* new. There already have been several board reveisions, and each
	included a slight, or larger improvement.
•	the OMAP4430 {SoC|System on a chip} is supported by the Linux kernel, and it
	works with Android Jelly Bean. No Windows RT support, but who cares?
•	and it connects to the world via Ethernet, wireless Ethernet.
•	Finally, it does have multiple USB and HDMI ports.

Other benefits include 1 GiB memory, Bluetooth, and a GPU supporting OpenGL ES 2.0.
I liked the memory size, but the rest not so much for running a development appliance.

A thing which should not be forgotten here is the community surrounding the Pandaboard,
and the wealth of documentation for this board. I really like that.

## Preparations ## (#preparations)

If you are still with me, that probably means a) my writing style is entertaining, or
b) you bought a Pandaboard ES, and want to use this thing like *NOW*.

In that case you will need a few items -- all of which this <YouTube video (//youtube.com/watch?v=DZUwUm6Srg0)> mentions --
and probably an hour of spare time to do the dirty work. Personally I did not buy
the full stack of accessories, since I already own a sufficient amount of USB and
HDMI cables, and also have a computer (the <Zotac ZBOX ID83 (//www.zotacusa.com/zbox-id83.html)>)
which can write to SD cards.

What I did buy though was an <acryl case by Axiris (//www.axiris.eu/en/index.php/enclosures/case-for-pandaboard-es)>,
a 32 GiB SanDisk SD card, and 5V AC/DC adapter (extra slim).

In the end, you will *need* a system which has a working SD card writer -- both
internal and external work fine -- and at least a Linux partition to boot into.

If you have not, I recommend to install <Ubuntu (//ubuntu.com)> which is by far
the easiest route if your a Windows user currently. Once installed open a terminal
and install a few packages to ease the process:

~~~ Bash ~~~>
$ sudo apt-get install -y autoconf automake clang cmake cmake-curses-gui gcc g++ libtool make patch
$ sudo apt-get install -y git-core
<~~~

In theory you could install the `build-essential` package, but sadly that seems to
leave you with an incomplete build chain.

Now let's get dirty, and create a base of operations:

~~~ Bash ~~~>
$ mkdir -p ~/Downloads/Pandaboard/
$ cd ~/Downloads/Pandaboard/
<~~~

We will work from here in every step.

### Pickup the GCC toolchain ### (#preparations-gcc-toolchain)

<Linaro (//linaro.org)> is a not-for-profit organization providing modifications to run
Linux and related tools on the ARM architecture. Lucky for us they provide a compiler /
linker toolchain which creates code running on ARM.

<aside>
	Attention: the export of *`CC`* is required for all build steps.

	Export *`CC`* again, if you close your terminal, and continue later.
</aside>

~~~ Bash ~~~>
$ cd ~/Downloads/Pandaboard/
$ wget https://launchpad.net/linaro-toolchain-binaries/trunk/2013.05/+download/gcc-linaro-arm-linux-gnueabihf-4.8-2013.05_linux.tar.bz2
$ tar xjf gcc-linaro-arm-linux-gnueabihf-4.8-2013.05_linux.tar.bz2
$ export CC=`pwd`/gcc-linaro-arm-linux-gnueabihf-4.8-2013.05_linux/bin/arm-linux-gnueabihf-
<~~~

### Build the bootloader ### (#preparations-build-bootloader)

<Das U-Boot (//www.denx.de/wiki/U-Boot)> -- a clever double pun {BTW|by the way} --
is used to load the system. Without it, you would just have a piece of trash in your
hands instead of a fine development appliance.

<aside>
	*U-Boot* is a fast moving project, which is why we use their <git repository (//git.denx.de/?p=u-boot.git;a=summary)>
	to pickup the code, and build it ourselves.
</aside>

~~~ Bash ~~~>
$ cd ~/Downloads/
$ git clone git://git.denx.de/u-boot.git
$ cd u-boot/
$ git checkout v2013.04 -b tmp
<~~~

Noticed that I checked out a tag? If not, or if git and tagging is not your world: the
U-Boot repository marks useable states of their bootloader with _git tags_. Think of
named bookmarks for a version. As of writing this guide, *v2013.04* is the most recent
_tag_.

Check their <git web interface (//git.denx.de/?p=u-boot.git;a=summary)> for a more recent
version if you desire. The available _tags_ are listed there.

We are not done yet, though. Robert Nelson provided a patch which sets a few sane
defaults in U-Boot.

~~~ Bash ~~~>
$ cd ~/Downloads/u-boot/
$ wget https://raw.github.com/eewiki/u-boot-patches/master/v2013.04/0001-omap4_common-uEnv.txt-bootz-n-fixes.patch
$ patch -p1 0001-omap4_common-uEnv.txt-bootz-n-fixes.patch
<~~~

With the patch applied we can finally make use of the GCC toolchain, and compile the
bootloader:

~~~ Bash ~~~>
$ make ARCH=arm CROSS_COMPILE=${CC} distclean
$ make ARCH=arm CROSS_COMPILE=${CC} omap4_panda_config
$ make ARCH=arm CROSS_COMPILE=${CC}
<~~~

Depending on the system you are building on this process may take a few minutes.

### Build a kernel image ### (#preparations-kernel-image)

Why are we building a custom boot image, and why kernel 3.9?
Also, a bit of an estimate would be nice.

### Download pre-installed Debian 7 ### (#preparations-download-debian-7)

Describe the pre-built Debian file system, and how to get hold of it.

## Installation ## (#installation)

Describe what the process includes, and requires.

### Setup the SD card ### (#installation-setup-sd-card)

Describe the different decive names, and what we are going to do
with the SD card, then manipulate it.

### Mount the SD card ### (#installation-mount-sd-card)

Make the prepared SD card available to the system.

### Install the bootloader ### (#installation-bootloader)

Install the built bootloader.

### Configure the bootloader ### (#installation-bootloader-configure)

Add a configuration file, and describe what it actually does.

### Install the kernel image ### (#installation-kernel-image)

Install the built kernel image to the boot partition.

### Install the Debian 7 file system ### (#installation-debian-7)

Copy the pre-built Debian file system to the SD card.

### Configure the Pandaboard ### (#installation-configure-pandaboard)

Describe which configuration steps to take before booting up the
board.

## First boot ## (#booting)

... and end with the configuration steps recommended after first boot.

</section>
